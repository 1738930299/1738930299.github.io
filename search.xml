<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello</title>
      <link href="/2020/07/14/hello/"/>
      <url>/2020/07/14/hello/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/14/hello-world/"/>
      <url>/2020/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2020/07/04/firsttime/"/>
      <url>/2020/07/04/firsttime/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通路：在无向图中由点边交替组成的序列就是通路（如果这个图是简单的，那么也可以使用点的序列来表示），如果首尾的点相同，则称为一条回路<br>无向图的连通性：无向图中任意一对点之间均有通路<br>欧拉通路：从某个顶点出发，将所有的边遍历一遍并且仅经过一遍的通路序列称为欧拉通路，连通的多重图有欧拉回路而无欧拉回路当且仅当它恰有两个奇数度顶点<br>这里说明了欧拉通路的条件：</p><p>图是连通的，没有孤立节点<br>对于无向图来说，奇数度的顶点为2个，这两个顶点分别是起点以及终点（0个的话就是回路了）<br>欧拉回路：如果欧拉通路的起点与终点一样，则成为欧拉回路， 连通的多重图具有欧拉回路当且仅当它的每个顶点都有偶数度<br>则欧拉回路的条件：</p><p>图是连通的，没有孤立节点<br>无向图的每个节点的度数都是偶数度，有向图每个节点的入度等于出度<br>判断图是否存在欧拉回路<br>根据判断的条件，首先是判断图的连通性，然后判断图的每个节点的度数是否是偶数就可以了：</p><p>开始还要判断是否是欧拉回路。因为这个程序主要是针对欧拉回路的。<br>因为图中奇度顶点组合成4条边的情形有很多种，所以要分别求出每种组合形成的边的代价，然后从中选出代价最小的边。<br>另外，在此问题中，边的“添加”的应该理解为从一个奇度点到另一个奇度点之间的路径。<br>“邮递员”问题的算法描述如下:<br>（1） 建立街区无向网的邻接矩阵；<br>（2） 求各顶点的度数；<br>（3） 求出所有奇度点；<br>（4） 求出每一个奇度点到其它奇度点的最短路径；<br>（5） 找出距离最短的添加方案；<br>（6） 根据最佳方案添加边，对图进行修改，使之满足一笔画的条件；<br>（7） 对图进行一笔画，并输出；</p><p>程序首先输入点与边，和点与边的关系，读取结点个数和边条数以及点与点间的连通关系，并建立街区无向网的邻接矩阵，同时记录各结点度数。<br>随后遍历各结点，找出其中所有的奇点。如果奇点个数大于2，则需要加边来使奇点数为0；如果奇点正好为两个，则从其中一个点出发，到另一点结束能形成欧拉图，但是不能形成回路，也不能保证从邮局出发；如果奇点数为0，则可以形成欧拉回路。接下来分情况讨论：<br>当奇点数大于2的时候：通过Floyd算法求任意两点路径的最短距离，并将读入的图的数据更新为最短路径。随后进入extend_edge()函数。通过标记的方法来加边。当某一边的始点与终点均为奇点，并且两点间可连通时，将需要加边的始点和终点以及距离信息存入odd_edge中。随后通过一个深度遍历，判断需要加的边是否为最短的，即确定距离最短的添加方案。随后用dijkstra算法确定从该始点到终点的最短路径。<br>当奇点数等于2的时候，判断起始点能否为1，若可以，则设置first_id = 1即可。若不能，则无法构成环路。</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
